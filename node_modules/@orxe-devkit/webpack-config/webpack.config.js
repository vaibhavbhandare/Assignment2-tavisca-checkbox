/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable no-mixed-spaces-and-tabs */
/* global module require process __dirname*/

const { resolve } = require('path');
const webpack = require('webpack');

const TerserPlugin = require('terser-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');

const paths = require('./paths');

const appPackageJson = require(paths.appPackageJson);

const production = process.argv.find((arg) => arg.includes('--production'));

const styleRules = {
	test: /\.css$|s(c|)ss$/,
	use: [
		{
			loader: 'lit-scss-loader',
			options: {
				minify: false,
			},
		},
		'extract-loader',
		'css-loader',
		'sass-loader',
	],
};

const optimization = {
	minimize: true,
	minimizer: [new TerserPlugin()],
};

const devServer = {
	contentBase: resolve(__dirname, './public'),
	compress: false,
	port: 3000,
};

const getPlugins = (isEnvProduction) => {
	const plugins = [
		new CleanWebpackPlugin(['dist']),
		new webpack.ProgressPlugin(),
		new HtmlWebpackPlugin(
			Object.assign(
				{},
				{
					inject: true,
					template: paths.appHtml,
				},
				isEnvProduction
					? {
							minify: {
								removeComments: true,
								collapseWhitespace: true,
								removeRedundantAttributes: true,
								useShortDoctype: true,
								removeEmptyAttributes: true,
								removeStyleLinkTypeAttributes: true,
								keepClosingSlash: true,
								minifyJS: true,
								minifyCSS: true,
								minifyURLs: true,
							},
					  }
					: undefined,
			),
		),
		new CopyWebpackPlugin([{ from: 'assets/locales', to: 'assets/locales' }]),
	];
	return plugins;
};

module.exports = function() {
	const isEnvProduction = !!production;
	const plugins = getPlugins(isEnvProduction);
	let config = {
		mode: isEnvProduction ? 'production' : 'development',
		devtool: isEnvProduction ? 'none' : 'cheap-module-source-map',
		entry: [paths.appIndexJs].filter(Boolean),
		resolve: {
			extensions: ['.ts', '.js', '.css', '.scss', 'json'],
		},
		output: {
			filename: 'bundle.js',
			futureEmitAssets: true,
			jsonpFunction: `webpackJsonp${appPackageJson.name}`,
		},
		module: {
			rules: [
				styleRules,
				{
					test: /\.js$/,
					exclude: /node_modules/,
					loader: 'babel-loader',
					options: {
						plugins: ['@babel/plugin-syntax-dynamic-import'],
						presets: [
							[
								'@babel/preset-env',
								{
									useBuiltIns: 'usage',
									targets: '>1%, not dead, not ie 11',
								},
							],
						],
					},
				},
				{
					test: /\.ts?$/,
					loader: 'ts-loader',
					exclude: /node_modules/,
				},
				{
					test: /\.html$/,
					use: ['html-loader'],
					exclude: /node_modules/,
				},
				{
					test: /\.json$/,
					use: 'json-loader',
				},
			],
		},
		plugins,
	};
	if (isEnvProduction) {
		config = { ...config, optimization };
	} else {
		config = { ...config, devServer };
	}
	return config;
};
