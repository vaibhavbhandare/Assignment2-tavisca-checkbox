#!/usr/bin/env node

const fs = require('file-system');
const fse = require('fs-extra');
const sass = require('node-sass');
const path = require('path');
const process = require('process');
const chokidar = require('chokidar');
const _hasArgumemt = process.argv.includes('-theme');

function generateFile(dir, scssFilePath, extension) {
  const pathDir = path.parse(scssFilePath).dir;
  const pathName = path.parse(scssFilePath).name;
  if (_hasArgumemt) {
    return path.resolve(pathDir, dir, `${pathName}${extension}`);
  } else {
    return path.resolve(pathDir, `${pathName}-css.ts`);
  }
}

function fileConverter(sassFile, filetype) {
  if (!sassFile.includes('.ts')) {
    sass.render(
      {
        file: sassFile,
        sourceMap: true,
        includePaths: ['./node_modules/', './src/', './packages/'],
        outputStyle: 'compressed',
        importer: function importer(sassFile, prev, done) {
          if (sassFile[0] === '~') {
            sassFile = path.resolve('node_modules', sassFile.substr(1));
          }
          return { file: sassFile };
        },
      },
      function (err, result) {
        if (!err) {
          let file, content, tsFileContent;
          tsFileContent = `import {css} from 'lit-element';\nexport default css\`${result.css
            .toString()
            .trim()
            .replace(':root', ':host')}\`;`;
          switch (filetype) {
            case 'ts':
              file = generateFile('ts', sassFile, '.ts');
              content = tsFileContent;
              break;
            case 'js':
              file = generateFile('js', sassFile, '.js');
              content = tsFileContent;
              break;
            case 'css':
              file = generateFile('css', sassFile, '.css');
              content = result.css;
              break;
          }
          fs.writeFile(file, content, err);

        }
        else {
          console.error('Something went wrong ', err);
        }
      },
    );
  }
}

function watcher() {
  const watcher = chokidar.watch('./src/*.scss', {
    ignored: /(map|js)/,
    persistent: true,
  });
  watcher.on('change', (path) => {
    setTimeout(() => {
      fileConverter(path, 'ts');
    }, 100);
  });
}

async function buildTheme() {
  await fs.mkdir('dist');
  fse.copy('src', 'dist', async () => {
    await process.chdir('dist');
    await fs.recurse('./', ['**/[a-zA-Z0-9-]+(?<!map).scss'], function (filepath) {
      fileConverter(filepath, 'css');
      fileConverter(filepath, 'ts');
      fileConverter(filepath, 'js');
    });
  });
}

(function scssrenderer() {
  if (_hasArgumemt) {
    buildTheme();
  } else {
    watcher();
    fs.recurse('./src', ['**/[a-zA-Z-]+(?<!map).scss'], function (filepath) {
      fileConverter(filepath, 'ts');
    });
  }
})();
